// Code generated by MockGen. DO NOT EDIT.
// Source: redis_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mahfuz110244/api-mc/internal/models"
)

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// DeleteStatusCtx mocks base method.
func (m *MockRedisRepository) DeleteStatusCtx(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatusCtx", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatusCtx indicates an expected call of DeleteStatusCtx.
func (mr *MockRedisRepositoryMockRecorder) DeleteStatusCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatusCtx", reflect.TypeOf((*MockRedisRepository)(nil).DeleteStatusCtx), ctx, key)
}

// GetStatusByIDCtx mocks base method.
func (m *MockRedisRepository) GetStatusByIDCtx(ctx context.Context, key string) (*models.StatusBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusByIDCtx", ctx, key)
	ret0, _ := ret[0].(*models.StatusBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusByIDCtx indicates an expected call of GetStatusByIDCtx.
func (mr *MockRedisRepositoryMockRecorder) GetStatusByIDCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusByIDCtx", reflect.TypeOf((*MockRedisRepository)(nil).GetStatusByIDCtx), ctx, key)
}

// SetStatusCtx mocks base method.
func (m *MockRedisRepository) SetStatusCtx(ctx context.Context, key string, seconds int, status *models.StatusBase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusCtx", ctx, key, seconds, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusCtx indicates an expected call of SetStatusCtx.
func (mr *MockRedisRepositoryMockRecorder) SetStatusCtx(ctx, key, seconds, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusCtx", reflect.TypeOf((*MockRedisRepository)(nil).SetStatusCtx), ctx, key, seconds, status)
}
