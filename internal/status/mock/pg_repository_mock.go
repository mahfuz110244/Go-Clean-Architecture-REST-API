// Code generated by MockGen. DO NOT EDIT.
// Source: internal/status/pg_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/mahfuz110244/api-mc/internal/models"
	utils "github.com/mahfuz110244/api-mc/pkg/utils"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, status *models.Status) (*models.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, status)
	ret0, _ := ret[0].(*models.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, status)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, statusID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, statusID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, statusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, statusID)
}

// GetStatus mocks base method.
func (m *MockRepository) GetStatus(ctx context.Context, params *models.StatusParams, pq *utils.PaginationQuery) (*models.StatusList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, params, pq)
	ret0, _ := ret[0].(*models.StatusList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockRepositoryMockRecorder) GetStatus(ctx, params, pq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockRepository)(nil).GetStatus), ctx, params, pq)
}

// GetStatusByID mocks base method.
func (m *MockRepository) GetStatusByID(ctx context.Context, statusID uuid.UUID) (*models.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusByID", ctx, statusID)
	ret0, _ := ret[0].(*models.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusByID indicates an expected call of GetStatusByID.
func (mr *MockRepositoryMockRecorder) GetStatusByID(ctx, statusID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusByID", reflect.TypeOf((*MockRepository)(nil).GetStatusByID), ctx, statusID)
}

// SearchByTitle mocks base method.
func (m *MockRepository) SearchByTitle(ctx context.Context, title string, query *utils.PaginationQuery) (*models.StatusList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByTitle", ctx, title, query)
	ret0, _ := ret[0].(*models.StatusList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByTitle indicates an expected call of SearchByTitle.
func (mr *MockRepositoryMockRecorder) SearchByTitle(ctx, title, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByTitle", reflect.TypeOf((*MockRepository)(nil).SearchByTitle), ctx, title, query)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, status *models.Status) (*models.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, status)
	ret0, _ := ret[0].(*models.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, status)
}
